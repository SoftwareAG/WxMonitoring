	#THIS FILE IS REQUIRED TO PARSE CUSTOM LOGS.
filter {
	#To identify if the log is custom log.
	if [log_identifier] == "custom_log" {
		grok {
		match => { "message" => "%{TIMESTAMP_ISO8601:event_timestamp} %{WORD:log_time_zone} \[%{DATA:process_id}\] \[%{DATA:service_name}\] \[%{DATA:event_code}\] \[%{DATA:severity}\] %{GREEDYDATA:event_information}" }
		add_field => { 	 
						"event_identifier" => "custom_unknown_event"
						"event_tags" => "custom_unknown_event"
					}
		}
		mutate {
					# Renames the 'log_identifier' field to 'custom_event_log'
					replace  => { "log_identifier" => "custom_event_log" }
				}
	} 
	
	if [log_identifier] == "custom_event_log"{
		
		#convert event_timestamp to date type.
	
		date {
			match => [ "event_timestamp", "yyyy-MM-dd HH:mm:ss" ]
			timezone => "Europe/Berlin"
			target => ["event_timestamp_in_utc"]
		}

		mutate {
			replace => { "event_timestamp" => " %{event_timestamp_in_utc}" }
			gsub => [
						"event_timestamp", "T", " ",
						"event_timestamp", ".000Z", ""
					]
			strip => ["event_timestamp"]
			remove_field => [ "event_timestamp_in_utc"]
		}

		date {
			match => [ "event_timestamp_utc", "yyyy-MM-dd HH:mm:ss" ]
		}		
		
		
		
		if [process_id] != "N/A" and [process_id] != 'null'{
			mutate {
				# Renames the 'log_identifier' field to 'custom_event_log'
				replace  => { 
					"log_identifier" => "custom_process_log" 
					"event_identifier" => "custom_process_event"
					"event_tags" => "custom_unknown_event"
				}
			}
			clone {
				clones => [ "process_log" ]	
			}
		}	
	}
	
	if [log_identifier] == "custom_process_log" {
		if [type] == 'process_log' {
			if ("" in [process_id]) {
				mutate {
						add_field => { 
							log_id => "%{process_id}"
							last_updated_utc => "%{event_timestamp}"
							log_history => "%{message}"
							process_env => "%{[fields][env]}"
						}
						remove_field => [ "time_zone", "@version", "host", "event_code", "severity", "event_information", "message", "log_after_process_id", "log_before_process_id", "beat", "prospector", "event_identifier", "fields", "tags", "event_timestamp", "headers", "service_name"]
					}
			} else { 
				drop {}
			}
		} else	{
		
			translate {
				field => "severity"
				destination => "event_severity"
				dictionary => {
					"INFO" => "INFO"
					"ERROR" => "ERROR"
					"FATAL" => "FATAL"
					"WARNING" => "WARNING"
					"WARN" => "WARNING"
				}
				remove_field => "severity"
			}
			
			mutate {
				add_field => { event_env => "%{[fields][env]}" }
				rename  => { "message" => "complete_event_log" }
				rename => { "event_timestamp" => "event_timestamp_utc" }
				remove_field => [ "time_zone", "beat", "prospector", "tags", "fields", "@version", "log_filePath", "headers" ]
			}
		}
	
	} else if [log_identifier] == "custom_event_log" {
		
		translate {
				field => "severity"
				destination => "event_severity"
				dictionary => {
					"INFO" => "INFO"
					"ERROR" => "ERROR"
					"FATAL" => "FATAL"
					"WARNING" => "WARNING"
					"WARN" => "WARNING"
				}
				remove_field => "severity"
			}
		
		mutate {
				add_field => { event_env => "%{[fields][env]}" }
				rename  => { "message" => "complete_event_log" }
				rename => { "event_timestamp" => "event_timestamp_utc" }
				remove_field => [ "time_zone", "beat", "prospector", "tags", "fields", "@version", "log_filePath", "headers", "process_id" ]
		}
	}
}